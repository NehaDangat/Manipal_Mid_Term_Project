package com.hdfc.cilinOPD.Doctor.restController;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hdfc.cilinOPD.Doctor.DTO.DoctorDTO;
import com.hdfc.cilinOPD.Doctor.entity.Doctor;
import com.hdfc.cilinOPD.Doctor.exception.DoctorIDNotFound;
import com.hdfc.cilinOPD.Doctor.service.IDoctorService;



@RestController
@RequestMapping("/doctor")
public class DoctorRestController {
	
	@Autowired
	IDoctorService service;
	
	@PostMapping("/add")
	public Doctor addDoctor(@RequestBody DoctorDTO Ddto)
	{
		return service.addDoctor(Ddto);
	}
	/*
	
	@PutMapping("/update/{doctorId}")
	@Modifying
	@Query("update clinic_opd.doctor  set contact = contact, first_name = firstName,"
			+ "last_name = lastName ,specialization = specialization where doctor_id = doctorId")
	public ResponseEntity<Doctor> updateDoctor(@RequestBody Doctor Ddto) throws DoctorIDNotFound
	{
		Doctor updateDoctor = service.updateDoctor(Ddto);
		
		return new ResponseEntity<Doctor>(updateDoctor,HttpStatus.ACCEPTED);
	}
	
	@DeleteMapping("/delete/{doctorId}")
	public ResponseEntity<String> deleteDoctor(@PathVariable long doctorId){
		
		service.deleteByDoctorId(doctorId);
		
		return new ResponseEntity<>("Doctor Record Deleted ",HttpStatus.OK);
		
	}
	
	@GetMapping("/get/{doctorId}")
	public Doctor getByDoctorId(@PathVariable long doctorId ) {
		
		return service.getByDoctorId(doctorId);
	}
	
	@GetMapping("/getAll")
	public List<Doctor> getAllDoctor(){
		
		return service.getAll();
	}
	
	*/

}
