package com.hdfc.cilinOPD.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.hdfc.cilinOPD.Patient.entity.Patient;
import com.hdfc.cilinOPD.Patient.exception.PatientNotFound;
import com.hdfc.cilinOPD.Patient.repository.PatientRepository;
import com.hdfc.cilinOPD.PatientDTO.PatientDTO;

@Service
public class PatientServiceImp implements IPatientService {

	@Autowired
	PatientRepository repo;
	
	@Autowired
	RestTemplate restTemplate;
	
	
	@Override
	public Patient addPatient(PatientDTO Pdto)  {
		
		Patient patient = new Patient();
		
		patient.setPatientId(Pdto.getPatientId());
		patient.setFirstName(Pdto.getFirstName());
		patient.setLastName(Pdto.getLastName());
		patient.setContact(Pdto.getContact());
		patient.setMedicalHistory(Pdto.getMedicalHistory());
		patient.setInsuranceDetails(Pdto.getInsuranceDetails());
		
		return repo.save(patient);
	}

	@Override
	public Patient updatePatient(Patient Pdto) {
		
		Optional<Patient> opt = repo.findById(Pdto.getPatientId());
		
		if(opt.isPresent())
		{
			return repo.save(Pdto);
		}
		return Pdto;
		
      
	}

	@Override
	public Patient getByPatientId(long patientId) throws PatientNotFound {
		
		return repo.findById(patientId).orElseThrow(() -> new PatientNotFound());
	}


	@Override
	public void deletePatient(long patientId) throws PatientNotFound {
     
			repo.deleteById(patientId);
		
      }
/*
	@Override
	public List<Doctor> getDoctorInfoToPatient() throws PatientNotFound {
//		return null;
		
		Doctor doctor = restTemplate.getForObject("http://localhost:2000/doctor/getAll", Doctor.class);
		
	//	Patient patient = getByPatientId( );
		
		//Patient patient = restTemplate.getForObject("http://localhost:1999/getByPatientId"+ patientId, Patient.class);
		
//		PatientDotcor patientDoctor = new PatientDotcor(patient, doctor);
		
		
		return doctorPatientRepository.findAll();
	}
	*/

}


